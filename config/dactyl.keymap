/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define BASE 0
#define LOWER 1
#define RAISE 2
#define ADJUST 3

/ {
    // Activate ADJUST layer by pressing raise and lower

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <ADJUST>;
        };
    }
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                // Left Hand
                &kp Q  &kp W  &kp E  &kp R  &kp T  &none &none &none     &none &none &kp Y  &kp U  &kp I  &kp O  &kp P  &kp BSPC
                &kp A  &kp S  &kp D  &kp F  &kp G  &none &none &none     &none &none &kp H  &kp J  &kp K  &kp L  &kp SEMI &kp ENTER
                &kp Z  &kp X  &kp C  &kp V  &kp B  &none &none &none     &none &none &kp N  &kp M  &kp COMMA  &kp DOT  &kp SLASH &kp RSHIFT
                &none &none &none &kp LSHIFT &kp SPACE &none &none     &none &none &none &kp SPACE &kp LSHIFT &none &none &none &none
                &none &none &none &none &none &none &none &none     &none &none &none &none &none &none &none &none
            >;
        };

        fn_layer {
            bindings = <
                // Left Hand
                &kp ESC &kp F1 &kp F2 &kp F3 &kp F4 &none &none &none     &none &none &kp F5 &kp F6 &kp F7 &kp F8 &kp DEL &kp CAPS
                &kp TAB &kp LGUI &kp LALT &kp LCTL &kp LSFT &none &none &none     &none &none &kp RSFT &kp RCTL &kp RALT &kp RGUI &kp TAB &kp INS
                &none &none &none &none &none &none &none &none     &none &none &kp LEFT &kp DOWN &kp UP &kp RIGHT &kp BSPC &kp RSHIFT
                &none &none &none &kp LSHIFT &kp SPACE &none &none     &none &none &none &kp ENTER &kp SPACE &none &none &none &none
                &none &none &none &none &none &none &none &none     &none &none &none &none &none &none &none &none
            >;
        };
    };;

};
